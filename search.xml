<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[原生JS实现jQuery的addClass, removeClass, hasClass函数功能]]></title>
    <url>%2F%E5%8E%9F%E7%94%9FJS%E5%AE%9E%E7%8E%B0jQuery%E7%9A%84addClass%2C%20removeClass%2C%20hasClass%E5%87%BD%E6%95%B0%E5%8A%9F%E8%83%BD.html</url>
    <content type="text"><![CDATA[- [1] addClass123456function addClass(obj, cls)&#123; var obj_class = obj.className;//获取 class 内容. var blank = (obj_class != &apos;&apos;) ? &apos; &apos; : &apos;&apos;;//判断获取到的 class 是否为空, 如果不为空在前面加个&apos;空格&apos;. var added = obj_class + blank + cls;//组合原来的 class 和需要添加的 class. obj.className = added;//替换原来的 class.&#125; - [2] removeClass 1234567function removeClass(obj, cls)&#123; var obj_class = &apos; &apos;+obj.className+&apos; &apos;;//获取 class 内容, 并在首尾各加一个空格. ex) &apos;abc bcd&apos; -&gt; &apos; abc bcd &apos; obj_class = obj_class.replace(/(\s+)/gi, &apos; &apos;),//将多余的空字符替换成一个空格. ex) &apos; abc bcd &apos; -&gt; &apos; abc bcd &apos; var removed = obj_class.replace(&apos; &apos;+cls+&apos; &apos;, &apos; &apos;);//在原来的 class 替换掉首尾加了空格的 class. ex) &apos; abc bcd &apos; -&gt; &apos;bcd &apos; removed = removed.replace(/(^\s+)|(\s+$)/g, &apos;&apos;);//去掉首尾空格. ex) &apos;bcd &apos; -&gt; &apos;bcd&apos; obj.className = removed;//替换原来的 class.&#125; - [3] hasClass 1234567891011function hasClass(obj, cls)&#123; var obj_class = obj.className;//获取 class 内容. var obj_class_lst = obj_class.split(/\s+/);//通过split空字符将cls转换成数组. var x = 0; for(x in obj_class_lst) &#123; if(obj_class_lst[x] == cls) &#123;//循环数组, 判断是否包含cls return true; &#125; &#125; return false;&#125; ==原文链接 ++link++== 或者 12345678910111213141516171819202122232425262728293031323334/** * 判断样式是否存在 */function hasClass(obj, cls) &#123; return obj.className.match(new RegExp(&apos;(\\s|^)&apos; + cls + &apos;(\\s|$)&apos;));&#125;/** * 为指定的dom元素添加样式 */function addClass(obj, cls) &#123; if (!this.hasClass(obj, cls)) obj.className += &quot; &quot; + cls;&#125;/** * 删除指定dom元素的样式 */function removeClass(obj, cls) &#123; if (hasClass(obj, cls)) &#123; var reg = new RegExp(&apos;(\\s|^)&apos; + cls + &apos;(\\s|$)&apos;); obj.className = obj.className.replace(reg, &apos; &apos;); &#125;&#125;/** * 如果存在(不存在)，就删除(添加)一个样式 */function toggleClass(obj, cls) &#123; if (hasClass(obj, cls)) &#123; removeClass(obj, cls); &#125; else &#123; addClass(obj, cls); &#125;&#125; ==原文链接 ++link++==]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>jquery js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css解决背景透明的兼容性问题]]></title>
    <url>%2Fcss%E8%A7%A3%E5%86%B3%E8%83%8C%E6%99%AF%E9%80%8F%E6%98%8E%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98.html</url>
    <content type="text"><![CDATA[全浏览器兼容背景半透明的问题的么几个解决方案：1.使用半透明png图片平铺2.使用opcacity属性3.使用rgba和IE的opacity滤镜属性结合RGBA颜色rgba颜色的四个属性分别表示 red红色、green绿色、blue蓝色、alpha透明度。通过这几个数值能够轻松实现背景透明。代码如下：123456.backTtansparent&#123; /* 用于不支持RGBa的浏览器 */ background: rgb(0, 0, 0); /* RGBa, 透明度0.6 */ background: rgba(0, 0, 0, 0.6); &#125; 这样透明只对背景生效，对于非 ie 浏览器是非常完美的解决方案。不幸的是 ie8 及以下不支持 rgba 属性，并且经测试 ie9 会把 rgba 解析为全透明。 IE的filter 通过background: transparent注释可解决 ie9 解析rgba全透明问题。通过ie 的 filter 属性便可让 ie 支持背景透明。代码如下： 1234567.backTtansparent&#123; background: transparent/9; /* For IE 5.5 - 7*/ filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000); /* For IE 8*/ -ms-filter: &quot;progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000)&quot;; &#125; 能够看到filter中的8位16进制的半透明颜色#99000000为argb颜色，既#AARRGGBB，前两位是透明度，后面分别是红绿蓝。 如果我们希望透明度为 0.6，则需要将 0.6 乘以 255,再转化为 16 进制。最简单的方法是利用 JavaScript，在浏览器的调试面板里输入： 12Math.floor(0.6 * 255).toString(16); 回车后可以看到结果为99。这样透明度0.6的黑色的argb颜色即为#99000000。代码整合 1234567background: rgb(0, 0, 0); /* RGBa with 0.6 opacity */ background: rgba(0, 0, 0, 0.6); /* For IE 5.5 - 7*/ filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000); /* For IE 8*/ -ms-filter: &quot;progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000)&quot;;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css兼容性</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhello-world.html</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment 设置「阅读全文」1.在文章中使用 手动进行截断，Hexo 提供的方式 推荐2.在文章的 front-matter 中添加 description，并提供文章摘录3.自动形成摘要，在 主题配置文件 中添加： auto_excerpt: enable: true length: 150默认截取的长度为 150 字符，可以根据需要自行设定 1$ hexo deploy]]></content>
      <categories>
        <category>hexo 常用命令</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
